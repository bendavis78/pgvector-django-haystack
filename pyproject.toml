[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "pgvector-django-haystack"
version = "0.0.1"
description = "An integration of pgvector-python's django support with Haystack"
readme = "README.md"
keywords = []
authors = [{ name = "Ben Davis", email = "bdavis@oreilly.com" }]
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = ["haystack-ai", "pgvector", "psycopg[binary]", "django", "pytest-postgresql"]

[project.urls]
Source = "https://github.com/bendavis78/pgvector-django-haystack"
Documentation = "https://github.com/bendavis78/pgvector-django-haystack"
Issues = "https://github.com/bendavis78/pgvector-django-haystack/issues"

[tool.hatch.build.targets.wheel]
packages = ["django_haystack"]


[tool.hatch.envs.default]
installer = "uv"
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-django",
  "pytest-postgresql",
  "pytest-rerunfailures", 
  "ipython",
]

[tool.hatch.envs.default.env-vars]
PYTHONPATH = ".:tests/test-project"
DJANGO_SETTINGS_MODULE = "test_project.settings"

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests} && coverage report --show-missing"
test-cov-retry = "test-cov --reruns 3 --reruns-delay 30 -x"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]
cov-retry = ["test-cov-retry", "cov-report"]
# docs = ["pydoc-markdown pydoc/config.yml"]

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.hatch.envs.lint]
installer = "uv"
detached = true
dependencies = ["pip", "black>=23.1.0", "mypy>=1.0.0", "ruff>=0.0.243"]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive --explicit-package-bases {args:src/ tests}"
style = ["ruff check {args:.}", "black --check --diff {args:.}"]
fmt = ["black {args:.}", "ruff check --fix {args:.}", "style"]
all = ["style", "typing"]

[tool.black]
target-version = ["py38"]
line-length = 99

[tool.ruff]
# target-version = "py38"  # TODO
line-length = 99

[tool.ruff.lint]
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
]
unfixable = [
]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
# examples can contain "print" commands
"examples/**/*" = ["T201"]


[tool.coverage.run]
source = ["django_haystack"]

[tool.coverage.report]
omit = ["*/tests/*", "*/__init__.py"]
show_missing = true
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.pytest.ini_options]
markers = [
    "django_db: Mark the test as using the database",
    "integration: integration tests"
]
norecursedirs = ["test_project"]


[[tool.mypy.overrides]]
module = [
  "haystack.*",
  "pgvector.*",
  "psycopg.*",
  "pytest.*",
]
